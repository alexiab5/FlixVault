generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id            String          @id
  tmdbId        Int             @unique
  title         String
  director      String?
  releaseDate   DateTime?
  posterPath    String?
  language      String?
  voteAverage   Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  genres        MovieGenre[]
  reviews       Review[]
  userWatchlist UserWatchlist[]

  @@index([tmdbId])
  @@index([releaseDate])
  @@index([voteAverage])
  @@index([language])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movieId   String
  userId    String
  likes     Int      @default(0)
  isPublic  Boolean  @default(true)
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([movieId])
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
  @@index([likes])
  @@index([createdAt(sort: Desc), id])
  @@index([rating, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([movieId, rating])
}

model User {
  id          String          @id @default(cuid())
  name        String
  email       String          @unique
  password    String
  role        Role            @default(USER)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  lastLoginAt DateTime?
  auditLogs   AuditLog[]
  monitoredAs MonitoredUser?
  reviews     Review[]
  watchlist   UserWatchlist[]

  @@index([email])
  @@index([role])
  @@index([isActive])
}

model Genre {
  id        String       @id @default(cuid())
  tmdbId    Int          @unique
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  movies    MovieGenre[]
}

model MovieGenre {
  movieId String
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id])
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@id([movieId, genreId])
  @@index([movieId])
  @@index([genreId])
}

model UserWatchlist {
  userId  String
  movieId String
  addedAt DateTime @default(now())
  movie   Movie    @relation(fields: [movieId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@id([userId, movieId])
  @@index([userId])
  @@index([movieId])
  @@index([addedAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@index([userId, createdAt(sort: Desc)])
}

model MonitoredUser {
  id                String   @id @default(cuid())
  userId            String   @unique
  reason            String
  suspiciousActions Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}
